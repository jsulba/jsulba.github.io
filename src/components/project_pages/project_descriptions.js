export default class ProjectDescriptions{}

export const quantum_sim = {
    purpose: "Quantum Sim is a project I undertook with three other teammates at the 2019 McGill Physics Hackathon that involves quite literally a simulation for simple quantum computers. The goal of the project was to make the application of quantum mechanics in the field of computers easier to understand for anyone by providing a simple visual simulation tool. In other words, it lets anyone experiment with quantum logic circuits as they learn the theory on the side.",
    upt: "In terms of technology, we realized the project using Java, and JavaFX for the GUI. In order to stylize the interface, we also used CSS. The rest of the project consisted of translating the quantum mechanic theory into Java code. First, we had to implement qubits, which are essentially computer bits that have probabilistic states, rather than fixed binary states. Moreover, we had to implement state vectors to track the probabilistic system of all the qubits, which gets affected by the logic gates in the circuit. After implementing functions to handle those transformations (including superposition and entanglement), we translated a few algorithms, such as Deutsch's algorithm, to demonstrate the computational power of a small system of qubits. Here is an image of the interface.",
    challenges: "The main challenge I faced during this project was understanding the quantum mechanic concetps applied to computer science within the 24 hour time frame of the hackathon, to then create a whole interface to accomodate these concepts. I should also mention that I had to learn to implement certain functionalities that I had never worked on before such as drag and drop in JavaFX. Lastly, in a broader scope, it was time consuming to find a limit on the number of qubits we could support in order to demonstrate our algorithms. For instance, with just 4 qubits, our Deutsch's algorithm would entirely consume the available RAM on the laptops we were using. In that sense, we were quite limited by our hardware resources, but we still managed to demonstrate the concept.",
    outcomes: "I learned A LOT during this hackathon. As I mentioned, I learned a few new tricks involving JavaFX, but I was also made aware of a novel field of research in a few hours to then implement an application with that knowledge. Aside from those details, I also got a brief look into the kinds of problems that can be solved using quantum computing, which may prove to be useful as the technology becomes more accessible."
}

export const soultunes = {
    purpose: "Soultunes is a project I undertook with two friends during the 2020 ConUHacks V Hackathon that was inspired by a challenge provide by the Octave Group. We wanted to bring a fun twist to music streaming, and we decided to make an app that allows users to stream song previews based on their searches or optionally, the current weather!",
    upt: "Much like my other projects, I used Java and JavaFX to deliver the application. The core of the functionality comes from connecting to the Spotify API as well as the OpenWeather API. As you can deduce, the user queries the Spotify API via the app, and it parses the received message to play the online preview of the song. At its current state, we were too short on time to provide user input for location or automatic detection for that matter (i.e. the location is hard-coded). If I were to revisit this project, I would definitely try to implement this, and I would even like to move to a different tech stack (perhaps making it a web app directly).",
    challenges: "I did not have much knowledge of working with APIs before this project, so learning this process in Java was definitely a big step in the realization of this project. Other than that, it turns out that the team members I was working with did not have the same backgrounds, which resulted inefficient workflows and uneven distribution of work overall. This is actually a good reason as to why we ran short on time, but we pulled it together and delivered a decent proof of concept by the end.",
    outcomes: "I picked up a decent understanding of working with APIs while doing this project. Although the specifics escape me, I value the general understanding that I gained. Other than that, I learned to use a few extra JavaFX elements, like the loader and the table."
}

export const portfolio = {
    purpose: "After my first intership, I learned to use React while working on a proof of concept for some website components. I figured I would take what I learnt, and use it to make a good looking static website where I can show what I've worked on, and document projects as I go!",
    upt: "For now, I am only using React and Material UI since their components are nice to work with, especially for a simple static app like this.",
    challenges: "For one, I have yet to make the actual code behind this website more modular, as well as tweak certain visual elements (e.g. mobile format, images). Other than that, I had to mess around quite a bit with some Material UI components to get the look I wanted. For instance, I ended up using an Accordion isntead of the dedicated Navbar component to create my foldable navbar!",
    outcomes: ""
}

export const physics_mg = {
    purpose: "During my last semester, a few peers and I were tasked to code one large project that integrated our knowledge of all the disciplines we had seen up until then. With that in mind, we made an app that hosts three educative mini games. The first teaches the player how electromagnetism works via a target shooting game. The second is similar in style and simulates basic kinematics. The last one is a puzzle game that requires knowledge of optics to solve.",
    upt: "My role consisted of delivering the first game on electromagnetism (Charge Cannon). I had a great time trying to simulate a vector field in JavaFX, especially having no online references. I took my time to plan the structure on some sheets of paper and approximated functions to simulate the behaviour of real charges.",
    challenges: "Aside from the barrier I hit while designing a vector field for the electromagnetic forces, I ran into a few problems trying to bring it to life in JavaFX. I was able to overcome most of the issues I had, including collision handling and entity management (e.g. deleting the bullets if they are destroyed or wasted). One thing that I never found my way around was a performance issue where bullets would unexplainably slow down in the top quarter of the window. This is something I would definitely fix if I were to continue working on the game.",
    outcomes: "After all this design and implementation, the end product was fantastic combination of everything I learnt in my time at Vanier. I also gained a good introduction into project management during this project since I was required to present a Project Management Plan that layed out a whole timeline inspired by a Watferfall methodology."
}
